import datetime

def small(a,b):
    return a<b[0]
def big(a,b):
    return a>b[0]
def between(a,b):
    return a>b[0] and a<b[1]


def ma_t(array,config,date):
    short_ma=ta.SMA(array,5)[-1]
    long_ma=ta.SMA(array,30)[-1]
    return short_ma >= config[2] and long_ma <= config[3]


def macd_t(df,config,date):
    macd1, macdsignal, macdhist = ta.MACD(df, fastperiod=12, slowperiod=26, signalperiod=9)
    return macd1[-1] >= config[2] and macd1[-1] <= config[3]

def bench_t_s(config,date):
    conditions={'MA':ma_t,'MACD':macd_t}
    df=history(60,'1d','close')['000300.XSHG'].values;
    ans=True
    for con in config:
        ans=ans and conditions.get(con[0])(df,con,date)

    return ans



def asset_sort(list,config,info):
    map={}
    for id in list:
        num=info[['liquidAssets']][info.code == id]
        map[id]=num
    dict= sorted(map.iteritems(), key=lambda d:d[1], reverse = True)
    return dict.keys()


def industry_s(df,config):
    return df[df['industry']==config[1]]

def area_s(df,config):
    return df[df['area']==config[1]]

def asset_s(df,config):
    if config[1]=='>':
        return df[df['fixedAssets']>config[2]]
    elif config[1]=='<':
        return df[df['fixedAssets']<config[3]]
    elif config[1]=='<>':
        return df[df['fixedAssets']>config[2] and df['fixedAssets']<config[3]]

def macd_s(list,config,start=datetime.datetime.strptime('$root.strategyTest.start','%Y-%m-%d')):
    conditions={'<':small,'>':big,'<>':between}

    ans=[]
    for id in list:
        df=history(60,'1d','close')[id].values
        macd1, macdsignal, macdhist = ta.MACD(df, fastperiod=12, slowperiod=26, signalperiod=9)
        if conditions.get(config[1])(macdhist[-1],config[2:]) :
            ans.append(id)

    return ans
